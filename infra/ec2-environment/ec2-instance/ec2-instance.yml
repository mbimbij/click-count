Parameters:
  ApplicationName:
    Type: String
    Description: Application Name
  KeyName:
    Type: String
    Description: Key Name
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Ami Id
  Environment:
    Type: String
    Description: Environment (staging, prod, ...)
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Vpc Id
  SubnetId:
    Type: String
    Description: Subnet Id
  ApplicationPort:
    Default: 8080
    Type: Number
    Description: Subnet Name
  BastionHostSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Bastion Host Security Group
  TestRunnerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Test Runner Security Group
  LoadBalancerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Load Balancer Security Group
  InstanceType:
    Type: String
    Description: Instance Type
  TargetGroupArn:
    Type: String
    Description: Target Group Arn
Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2 security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroupId
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref BastionHostSecurityGroupId
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref TestRunnerSecurityGroupId
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId
#  Ec2Instance:
#    Type: AWS::EC2::Instance
#    Properties:
#      ImageId: !Ref AmiId
#      InstanceType: !Ref InstanceType
#      KeyName: !Ref KeyName
#      SecurityGroupIds:
#        - !Ref Ec2SecurityGroup
#      IamInstanceProfile: !Ref Ec2InstanceProfile
#      SubnetId: !Ref SubnetId
#      Tags:
#        - Key: Name
#          Value: !Sub '${ApplicationName}-${Environment}-instance'
#        - Key: Application
#          Value: !Sub '${ApplicationName}'
#        - Key: Environment
#          Value: !Sub '${Environment}'
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: Ec2InstanceRole
  Ec2InstanceRole:
    Type: 'AWS::IAM::Role'
    Description: IAM role for !Ref ApplicationName EC2 instance profile
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref ApplicationName
          - !Sub '${Environment}-ec2-instance-role'
      Policies:
        - PolicyName: !Sub '${ApplicationName}-build-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource:
                  - '*'
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt [ Ec2InstanceProfile, Arn ]
        SecurityGroupIds:
          - !Ref Ec2SecurityGroup
      LaunchTemplateName: !Sub '${ApplicationName}-${Environment}-ec2-launch-template'
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 60
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      DesiredCapacity: '2'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref TargetGroupArn
      VPCZoneIdentifier:
        - !Ref SubnetId
Outputs:
#  InstanceDns:
#    Value: !GetAtt [Ec2Instance, PrivateDnsName]
#    Export:
#      Name: !Sub '${ApplicationName}::${Environment}::InstancePrivateDns'
#  InstanceId:
#    Value: !Ref Ec2Instance
#    Export:
#      Name: !Sub '${ApplicationName}::${Environment}::InstanceId'
  SecurityGroupId:
    Value: !GetAtt [ Ec2SecurityGroup, GroupId ]
