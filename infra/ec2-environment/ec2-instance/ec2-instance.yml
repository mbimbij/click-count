Parameters:
  ApplicationName:
    Type: String
    Description: Application Name
  KeyName:
    Type: String
    Description: Key Name
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Ami Id
  Environment:
    Type: String
    Description: Environment (staging, prod, ...)
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Vpc Id
  SubnetId:
    Type: String
    Description: Subnet Id
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet Ids
  ApplicationPort:
    Default: 8080
    Type: Number
    Description: Subnet Name
  LoadBalancerPort:
    Default: 80
    Type: Number
    Description: Subnet Name
  BastionHostSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Bastion Host Security Group
  TestRunnerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Test Runner Security Group
  InstanceType:
    Type: String
    Description: Instance Type

Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2 security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSecurityGroupId
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref BastionHostSecurityGroupId
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref TestRunnerSecurityGroupId
        - IpProtocol: tcp
          FromPort: !Ref ApplicationPort
          ToPort: !Ref ApplicationPort
          SourceSecurityGroupId: !Ref AlbSecurityGroup
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}-${Environment}-instance'
        - Key: Application
          Value: !Sub '${ApplicationName}'
        - Key: Environment
          Value: !Sub '${Environment}'
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: Ec2InstanceRole
  Ec2InstanceRole:
    Type: 'AWS::IAM::Role'
    Description: IAM role for !Ref ApplicationName EC2 instance profile
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref ApplicationName
          - !Sub '${Environment}-ec2-instance-role'
      Policies:
        - PolicyName: !Sub '${ApplicationName}-build-policy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                Resource:
                  - '*'
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Alb security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: !Ref ApplicationPort
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckPath: "/actuator/health"
      TargetType: instance
      Protocol: HTTP
      Port: !Ref LoadBalancerPort
      VpcId: !Ref VpcId
      Targets:
        - Id: !Ref Ec2Instance
          Port: !Ref ApplicationPort
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Type: application
      Subnets: !Ref PublicSubnetIds
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: 1
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: "HTTP"
Outputs:
  InstanceDns:
    Value: !GetAtt
      - Ec2Instance
      - PrivateDnsName
    Export:
      Name: !Sub '${ApplicationName}::${Environment}::InstancePrivateDns'
  SecurityGroupId:
    Value: !GetAtt [ Ec2SecurityGroup, GroupId ]
